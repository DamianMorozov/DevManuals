====================================================================================================
GIT
Updated: 2019-04-23.
https://git-scm.com
https://desktop.origin.com
https://www.git-tower.com
https://github.com/trein/dev-best-practices/wiki/Git-Commit-Best-Practices
2016. С. Чакон, Б. Штрауб. Git для профессионального программиста.
====================================================================================================
Краткое руководство разработки ПО в Git
---------------------------------------
1. Права: https://gitlab.com/help/user/permissions
Master        --- ведущий разработчик ПО / владелец репозитория
Developer     --- разработчик проекта
Reporter      --- прочие
2. Ветки:
master        --- защищённая, используется только владельцем репозитория
dev           --- основная, содержит стабильный и актуальный исходный код
NameFamily    --- принадлежит конкретному разработчику
3. Основные понятия:
Commit - зафиксировать изменения
Fetch  – получить изменения из удаленного репозитория для сравнения и возможного последующего слияния
Push   – отправить изменения из локального репозитория в удаленный репозиторий
Merge  – выполнить слияние, применить изменения из другой ветки или другого репозитория
Pull   – fetch, затем merge
----------------------------------------------------------------------------------------------------
Три состояния файлов
--------------------
1. Committed / Зафиксированное  - данные сохранены в локальной БД
2. Modified  / Модифицированное - изменены файлы, но не зафиксированы в БД
3. Staged    / Индексированное  - пометили текущую версию модифицированного файла как предназначенную для фиксации
----------------------------------------------------------------------------------------------------
Рабочая область
---------------
1. Каталог Git - метаданные, БД
2. Рабочий каталог
3. Область индексирования - файл
----------------------------------------------------------------------------------------------------
Справка
-------
git help <команда>
git <команда> -- help
man git <команда>
----------------------------------------------------------------------------------------------------
Конфиг
------
.gitignore                                        --- файл исключений
git --version --build-options                     --- сведения об установленной версии GIT
git config --list                                 --- проверка глобальных настроек
git config --local --list                         --- проверка локальных настроек
git config --unset user.name                      --- удалить переменную
git config user.email                             --- проверка конкретной настройки
git config core.editor                            --- проверка конкретной настройки
git config --global user.name "..."               --- изменить настройку
git config --global user.email ...                --- изменить настройку
git config --global alias.co checkout             --- создать псевдоним команде checkout
git config --global alias.ci commit               --- создать псевдоним команде commit
git config --global alias.br branch               --- создать псевдоним команде branch
git config --global alias.st status               --- создать псевдоним команде status
git config --global alias.unstage "reset HEAD --" --- создать псевдоним unstage команде reset HEAD -- (отмена индексирования)
git config --global alias.hist "log --oneline --decorate --graph --all"
git config --global alias.hist2 "log --graph --pretty=format:\"%C(yellow)%h%Creset%C(cyan)%C(bold)%d%Creset %C(cyan)(%cr)%Creset %C(green)%ce%Creset %s\""
git unstage fileName                              --- эквивалент команде git reset HEAD fileName
git config --global alias.last "log -1 HEAD"      --- создать псевдоним команде вывода последних коммитов
git config --global alias.visual "!gitk"          --- создать псевдоним команде вызова внешнего инструмента
git config --global credential.helper cache       --- задать параметры хранилища на хранение учётных данных в кэше ОЗУ
git config --global credential.helper store       --- задать параметры хранилища на хранение учётных данных в локальном файле
git config --global http.proxy http://user_name:password@server_address:port_number  -- прокси-сервер
git status                                        --- определить состояние
git status -s                                     --- определить состояние в упрощённом виде
git commit -a -m "..."                            --- коммит с автодобавлением файлов для индексирования
git diff                                          --- отобразить разницу файлов, изменённых но не проиндексированных
git diff --staged                                 --- сравнить индексированные изменения с содержимым последней зафиксированной версии
----------------------------------------------------------------------------------------------------
Индексация
----------
git add *.cs                                      --- добавить слежение за файлами *.cs, добавить содержимое к следующему коммиту
git add .                                         --- добавить слежение за всеми файлами
----------------------------------------------------------------------------------------------------
Коммиты
-------
git commit -a -m "text"                           --- автоиндексирование всех отслеживаемых файлов (вместо git add)
git commit -m "Initial commit"                    --- создать коммит
git commit -m "Subject" -m "Message"              --- многострочный коммит
git commit -m "Subject"$'\n'"Message"             --- многострочный коммит
git add forgotten_file                            --- проиндексировать файл
git commit --amend                                --- перезаписать предыдущий коммит, берет область индексирования, и включает в коммит всю обнаруженную информацию
git commit -a --amend                             --- перезаписать предыдущий коммит
git reset HEAD fileName                           --- отменить индексирование файла
git reset --soft HEAD^                            --- отменить последний коммит
git reset --hard HEAD^                            --- удалить последний коммит
git reset --hard                                  --- восстановить изменения модифицированных файлов
git revert <commit_hash>                          --- отменить какой-то опубликованный коммит на сервере
git checkout -- fileName                          --- отменить изменения в самом файле (восстановить файл из предыдущей зафиксированной версии)
git checkout <commit_hash>                        --- перевести в состояние указанного коммита
----------------------------------------------------------------------------------------------------
Репозитории
-----------
git init                                          --- создать репозиторий или реинициализировать существующий
git clone https://URL.git                         --- клонировать репозиторий из URL
git clone https://URL.git "c:\...\"               --- клонировать репозиторий с сервера в новый каталог MyNewCatalog
git fetch origin                                  --- скачать изменения из репозитория (без слияния)
git fetch --all                                   --- скачать изменения из всех удалённых репозиториев (без слияния)
git pull origin                                   --- скачать изменения из репозитория и затем выполнить слияние
git pull origin --rebase                          --- скачать изменения из репозитория и затем выполнить слияние, переместить изменения из ветки
git push --all                                    --- отправить изменения всех веток
git push origin                                   --- отправить изменения текущей ветки в репозиторий
git push origin branchName                        --- отправить изменения ветки в репозиторий
git push -u origin branchName                     --- отправить изменения ветки в репозиторий и назначить текущей веткой
git push origin :oldName                          --- удалить старую ветку
git push origin :oldName newName                  --- удалить старую ветку и отправить новую
git push origin branchLocal:branchRemote          --- отправить изменения текущей ветки в репозиторий в новую ветку
git push origin --delete branchName               --- удалить ветку из удалённого репозитория
git push -u origin --all                          --- отправить все ветки
git push -u origin --tags                         --- отправить все теги
git push --delete <remote_name> <branch_name>     --- удалить удалённую ветку
git push --set-upstream gitlab master             --- назначить локальную ветку на удалённую
git remote                                        --- просмотр репозиториев
git remote -v                                     --- просмотр URL репозиториев
git remote show origin                            --- подробный просмотр репозитория
git remote add origin https://URL.git             --- добавить репозиторий
git remote remove origin                          --- удалить репозиторий
git remote rename origin gitlab                   --- переименовать репозиторий
git remote rm origin                              --- удалить ссылку на репозиторий
----------------------------------------------------------------------------------------------------
Удаление файлов
---------------
git clean -f                                      --- удалить новые добавленные файлы, которое не нужно коммитить
git clean -fd                                     --- удалить новые добавленные файлы и каталоги, которое не нужно коммитить
git mv README README.md                           --- переместить файл
git rm file.txt                                   --- удаление файла из списка отслеживаемых
git rm -rf .git*                                  --- удалить .gitignore и .gitmodules
git rm -rf .git                                   --- удалить репозиторий -r -- recursive, -f -- force
git rm log/\*.txt                                 --- удалить файлы *.txt в каталоге log
git rm \*~                                        --- удалить все файлы начинающиеся на символ ~
git rm --cached -rf .                             --- не следить за всеми файлами и каталогами
git rm --cached "SomeFile"                        --- не следить за конкретным файлом
----------------------------------------------------------------------------------------------------
История версий
--------------
git log                                           --- история версий
git log -p -2                                     --- разница в истории версий, ограничить последние 2 записи
git log --oneline --decorate --graph --all        --- история версий, показывая места расположения указателей и точки расхождения
git log --pretty=oneline                          --- история версий в одну строку, формат вывода =short/=full/=fuller
git log --pretty=format:"%h %s" --graph
git log --since=2.weeks                           --- ограничить вывод 2 неделями
git log --stat                                    --- краткая статистика по каждой версии
git shortlog                                      --- группировка коммитов по пользователям
----------------------------------------------------------------------------------------------------
Теги
----
git push origin tagName                           --- отправить тег в репозиторий
git push origin --tags                            --- отправить все теги в репозиторий
git show v1.6.4.047                               --- просмотр содержимого тега
git tag                                           --- просмотр тегов
git tag -l *v1.6*                                 --- поиск тегов по маске
git tag -a v1.6.4.047 -m "26.04.2018"             --- создать тег с версией и комментарием
git tag v1.6.4.047-lw                             --- создать легковесный тег с версией
git tag -a v1.6.1.001 d0704b00b5                  --- создать тег с версией для коммита по части хэша
----------------------------------------------------------------------------------------------------
Ветвление
---------
HEAD                                              --- указатель на текущую ветку
git checkout branchName                           --- сменить ветку (перевести указатель HEAD)
git checkout -b branchName                        --- создать новую ветку из текущей и перевести указатель HEAD
git checkout -b branchName origin/branchName      --- создать новую ветку из удалённой ветки и перевести указатель HEAD
git branch                                        --- просмотр всех веток
git branch branchName                             --- создать новую ветку
git branch -d branchName                          --- удалить ветку
git branch -D branchName                          --- удалить ветку, имеющую расхождения с удалённой
git branch -m oldName newName                     --- переименовать ветку
git branch -v                                     --- просмотр последних изменений всех веток
git branch -vv                                    --- просмотр списка наблюдения
git branch --merged                               --- просмотр веток, объединённых с текущей
git branch --no-merged                            --- просмотр веток, не объединённых с текущей
git merge branchHotfix                            --- объединить ветку branchHotfix с текущей веткой
git merge origin/branchName                       --- выполнить слияние удалённой ветки в токующую
git mergetool                                     --- запустить инструмент разрешения конфликтов слияния
                                                  --- rebase лучше не пользоваться, есть merge
                                                  --- rebase можно пользоваться в локальном репозитории
git rebase branchName                             --- переместить изменения в текущую ветку из ветки branchName
git rebase master server                          --- переместить изменения в ветку master из ветки server
git rebase --onto master server client            --- переместить изменения в ветку master из ветки client, не связанные с изменениями ветки sever
-- git checkout master                            --- переместить указатель на ветку master
-- git merge client                               --- применить изменения ветки client
----------------------------------------------------------------------------------------------------
Слежение за ветками
git checkout --track origin/branchName            --- следить за удалённой веткой
git branch -u origin/branchName                   --- сопоставить текущую ветку с удалённой
git merge @{u}                                    --- выполнить слияние из удалённой ветки
----------------------------------------------------------------------------------------------------
Заначки
git stash                                         --- спрятать изменения в специальный раздел заначек
git stash list                                    --- просмотреть список спрятанных изменений
git stash apply                                   --- применить последнюю заначку
git stash apply stash@{2}                         --- применить указанную заначку
git stash apply --index                           --- применить последнюю заначку, плюс внести изменения в индекс
git stash drop 
git stash pop                                     --- применить спрятанные изменения и сразу же удалить их из стека
git stash branch                                  --- создать ветки из спрятанных изменений
----------------------------------------------------------------------------------------------------
How to revert uncommitted changes including files and folders?
git reset --hard                                  --- Revert changes to modified files.
git clean -fd                                     --- Remove all untracked files and directories.
----------------------------------------------------------------------------------------------------
