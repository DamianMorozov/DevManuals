----------------------------------------------------------------------------------------------------
Михаил Флёнов. Основы C#
----------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------
2.1. Комментарии - стр 41
-------------------------

----------------------------------------------------------------------------------------------------
2.2. Переменная - стр 42
------------------------
Common Type System (CTS) / Обшая система типов
Позволяет использовать общие типы данных на разных языках программирования.
Все типы являются объектами.
Деление типов данных
1. Размерные
- для хранения простых типов, выделяется указанное число байт
2. Ссылочные
- объекты, а имя переменной - это ссылка (не указатель)

----------------------------------------------------------------------------------------------------
CTS Data Type  | Объект  | C# псевдоним | VB псевдоним | C+/CLI псевдоним  | Описание 
---------------+---------+--------------+--------------+-------------------+--------------------------------------------
System.Object  | Object  | object       | Object       | object^           | Базовый класс для всех типов CTS
System.String  | String  | string       | String       | String^           | Строка
System.Byte    | Byte    | byte         | Byte         | unsigned char     | 8-разрядное число без знака. Значения от 0 до 255
System.SByte   | SByte   | sbyte        | SByte        | signed char       | 8-разрядное число со знаком. Возможные значения от 128 до 127
System.Int16   | Int16   | short        | Short        | short             | 16-разрядное число со знаком. Возможные значения от 32 768 до 32 767
System.UInt16  | UInt16  | ushort       | UShort       | unsigned short    | 16-разрядное число без знака. Значения от 0 до 65 535
System.Int32   | Int32   | int          | Integer      | int or long       | 32-разрядное число со знаком. Возможные значения от 2 147 483 648 до 2 147 483 647
System.UInt32  | UInt32  | uint         | UInteger     | unsigned int/long | 32-разрядное число без знака. Значения от 0 до 4 294 967 295
System.Int64   | Int64   | long         | Long         | __int64           | 64-разрядное число со знаком. Значения от 9 223 372 036 854 775 808 до 9 223 372 036 854 775 807
System.UInt32  | UInt64  | ulong        | ULong        | unsigned __int64  | 64-разрядное число без знака. Значения от 0 до 18 446 744 073 709 551 615
System.Decimal | Decimal | decimal      | Decimal      | Decimal           | 128-разрядное число
System.Char    | Char    | char         | Char         | wchar_t           | 16-разрядный символ
System.Single  | Single  | float        | Single       | float             | 32-разрядное число с плавающей точкой стандарта IEEE
System.Double  | Double  | double       | Double       | double            | 64-разрядное число с плавающей точкой
System.Boolean | Boolean | bool         | Boolean      | bool              | Булево значение
----------------------------------------------------------------------------------------------------
При указании имени объекта нужно подключить пространство имён System.
При указании псевдонима ничего подключать не нужно.
Все функции управления памятью для переменных берёт на себя система.

----------------------------------------------------------------------------------------------------
2.3. Именование - стр 45
------------------------
Пространство имён - используй для группировки имён
namespace Имя {
  Определение типов, классов, переменных
}
Пример: Company.Project.Theme

----------------------------------------------------------------------------------------------------
2.4. Работа с переменными - стр 49
----------------------------------
System.In32 i;
i = 10;
Console.WriteLine(i);
Регистр букв имеет значение.
System.String s;
s = "Строка символов";

При копировании простых типов, копируется содержимое памяти.
При копировании ссылочных типов, копируется ссылка на объект. Т.е. две переменных ссылаются на один объект в памяти.

----------------------------------------------------------------------------------------------------
2.4.1. Строки и символы - стр 52
--------------------------------
string str = "Пример строки";
char ch = 'c';

----------------------------------------------------------------------------------------------------
2.4.2. Массивы - стр 54
-----------------------
int[] arrInt = new int[3];
arrInt[2] = 50;

char[] arrChar = new char[10];
string[] arrWeek = {"Понедельник","Вторник","","","","","Воскресенье"};

int[,] arrInt;
arrInt[] = new int[3,3];  // двумерный массив

int [,,] arrInt = new int[5,5,5];  // трёхмерный массив

----------------------------------------------------------------------------------------------------
2.4.3. Перечисления - стр 57
----------------------------
enum enumWeekDay {Monday,Tuesday,Wednesday,Thursday,Friday,Saturday,Sunday}
string[] 
enumWeekDay Day;
Day = enumWeekDay.Thursday;

----------------------------------------------------------------------------------------------------
2.5. Простейшая математика - стр 60
-----------------------------------
 Ф | Действие
 + | сложение
 - | вычитание
 * | умножение
 / | деление
++ | увеличить на 1
-- | уменьшить на 1
+= | прибавить к переменной
-= | вычесть из переменной
*= | умножить переменную на значение
/= | поделить переменную на значение

----------------------------------------------------------------------------------------------------
2.6. Логические операции - стр 64
-----------------------------------

----------------------------------------------------------------------------------------------------
2.6.1. Условный оператор if - стр 65
------------------------------------

----------------------------------------------------------------------------------------------------
2.6.2. Условный оператор swith - стр 67
---------------------------------------
switch (i)
{
  case 1:
    ...
    break;
  case 2:
    ...
    break;
  default:
    ...
    break;
}

----------------------------------------------------------------------------------------------------
2.6.3. Короткая проверка - стр 68
---------------------------------
Условие ? Действие 1 : Действие 2
Console.WriteLine(i == 10 ? "i = 10" : "i != 10");

----------------------------------------------------------------------------------------------------
2.7. Циклы - стр 68
-------------------

----------------------------------------------------------------------------------------------------
2.7.1. Цикл for - стр 69
------------------------

----------------------------------------------------------------------------------------------------
2.7.2. Цикл while - стр 71
--------------------------
Действие может ни разу не выполнится.
while (условие)
{
  Действия;
}

----------------------------------------------------------------------------------------------------
2.7.3. Цикл do ... while - стр 72
---------------------------------
Действие выполняется хотя бы один раз.


----------------------------------------------------------------------------------------------------
2.7.4. Цикл foreach - стр 73
----------------------------
foreach (тип переменная in массив)
{  
  Действия;
}

----------------------------------------------------------------------------------------------------
2.8. Управление циклом - стр 75
-------------------------------

2.8.1. Оператор break - стр 75
------------------------------

2.8.2. Оператор continue - стр 75
---------------------------------

----------------------------------------------------------------------------------------------------
2.9. Константы - стр 77
-----------------------

----------------------------------------------------------------------------------------------------
2.10. Нулевые значения - стр 77
-------------------------------
int? i = null;  // указывает значение null для целого типа данных

----------------------------------------------------------------------------------------------------
ООП - стр 79
------------

----------------------------------------------------------------------------------------------------
3.1. Объекты на C# - стр 79
---------------------------
Хороший класс решает одну задачу, а не несколько сразу.
Модификаторы доступа:
public - доступен всем
ptotected - доступен самому объекту и его потомкам
private - доступен только самому объекту, без потомков
internal - доступа только в пределах текущей сборки
protected internal - доступен самому объекту и его потомкам в пределах текущей сборки
Модификатор        | Объект | Потомки | Извне
-------------------+--------+---------+-------
public             |   +    |    +    |   +
protected          |   +    |    +    |   -
private            |   +    |    -    |   -
internal           |   +    |    ?    |   ?
protected internal |   +    |    ?    |   ?
Если модификатор не указан явно, то по умолчанию присваивается модификатор private.

----------------------------------------------------------------------------------------------------
3.2. Свойства - стр 83
----------------------
Доступ к свойствам не делать открытым, а делать через методы.
См. проект: ...\C# Visual\Studing\AppClass\
public int Length { get; set; } // свойство - обёртка для переменных
Аксессоры get и set по умолчанию объявляются public.

----------------------------------------------------------------------------------------------------
3.3. Методы - стр 88
--------------------

3.3.2. Параметры методов - стр 91
---------------------------------
Переменные передаются внутрь функций по значению.
ref - для передачи переменных по ссылке
out - для возврата и изменения значений переменных внутри метода
params int[] values - при вызове используем переменное кол-во переменных
- static int Sum (params int[] values)
- Sum(1,2,6);
- Sum(1,7,58,564,5)
params может использоваться только в конце и только один модификатор

----------------------------------------------------------------------------------------------------
3.3.3. Перегрузка методов - стр 97
----------------------------------
Методы различаются по разному кол-ву принимаемых параметров и разным типам данных.

----------------------------------------------------------------------------------------------------
3.3.4. Конструктор - стр 98
---------------------------
Задавай значения свойств при инициализации класса, в конструкторе.
Конструктор - метод, имя которого совпадает с именем класса, и он ничего не возращает.
this - ссылка на текущий (создаваемый) объект класса
Вместе со своим конструкторм, можно написать конструктор по умолчанию, без параметров.
Значения переменных по умолчанию, следует указывать при объявлении.
Shed sh = new Shed(1,2,3);  // инициализация объекта сарая
Можно вызывать собственный конструктор, а можно и по умолчанию.
В объявлении конструктора можно вызывать другой конструктор.
public Shed()
{ LoadTexture(); }
public Shed(int w, int h, int l): this()
{ SomeCode(); }
Можно написать метод InitVariables() - где можно указать общий код инициализации.

----------------------------------------------------------------------------------------------------
3.3.5. Статичность - стр 101
----------------------------
static применяется к переменным и к методам.
Статичный метод может использовать внутренние переменные, либо внешние статичные переменные.
Статичные переменные одинаковы для всех объектов класса.
Статичный конструктор
- выполняется только один раз, вне зависимости от создаваемых объектов
- не может иметь параметров, не может быть перегружен
- конструктор не имеет модификаторов доступа
Можно создавать статичный класс, который может содержать только статичные переменные и методы.
- для использования в качестве глобальных переменных и методов.
Инициализация значений статичных переменных происходит при первом обращении.

----------------------------------------------------------------------------------------------------
3.3.6. Рекурсивный вызов методов - стр 104
------------------------------------------

----------------------------------------------------------------------------------------------------
3.3.7. Деструктор - стр 106
----------------------------
Платформа .NET FrameWork сама занимается очисткой памяти.

----------------------------------------------------------------------------------------------------
3.4. Метод Main - стр 108
----------------------------
string[] args = Environment.GetCommandLineArgs();  // аргументы запуска
foreach (string s in args)
  Console.WriteLine(s);
Console.WriteLine("Полный путь к программе: "+Environment.GetCommandLineArgs()[0]);

----------------------------------------------------------------------------------------------------
3.5. Пространства имён - стр 110
--------------------------------
using winButton = System.Windows.Forms.Button;    // псевдоним кнопки формы
using winButton = System.Web.UI.Controls.Button;  // псевдоним кнопки веб

----------------------------------------------------------------------------------------------------
3.6. Начальные значения переменных - стр 121
--------------------------------------------
Переменная класса
числовые - 0
char - '\0'
bool - false
object - null
string - null

----------------------------------------------------------------------------------------------------
3.7. Объекты только для чтения - стр 122
----------------------------------------
static readonly Shed sh = new Shed();
static vod Main()
{
  sh = new Shed();  // ошибка, нельзя инициализировать повторно
}

----------------------------------------------------------------------------------------------------
3.8. ООП - стр 122
------------------

----------------------------------------------------------------------------------------------------
3.8.1. Наследование - стр 123
-----------------------------

----------------------------------------------------------------------------------------------------
3.8.2. Инкапсуляция - стр 124
-----------------------------
- Возможность спрятать реализацию объекта, и предоставить только необходимые свойства и методы.
Модификаторы доступа:
- public
- protected
- private

----------------------------------------------------------------------------------------------------
3.8.3. Полиморфизм - стр 125
----------------------------
- 

----------------------------------------------------------------------------------------------------
3.9. Наследование от класса Object - стр 126
--------------------------------------------
Все классы наследуются от класса Object.
class Person {}
идентично
class Person: System.Object {}
Equals() - сравнивает переданный объект, в качестве параметра с самим собой

----------------------------------------------------------------------------------------------------
5.2.2. Файл для логики модуля
----------------------------------------------------------------------------------------------------
Модификатор partial позволяет использовать несколько файлов для класса.

----------------------------------------------------------------------------------------------------
17. Повторное использование кода - стр 477
------------------------------------------

17.1. Библиотеки - стр 477
--------------------------
Библиотеки кода Class Library - DLL.
Могут быть написаны на любом языке программирования в рамках платформы Visual Studio.

17.2. Создание библиотеки - стр 478
-----------------------------------

17.3. Приватные сборки - стр 482
--------------------------------

