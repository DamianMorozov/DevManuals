====================================================================================================
https://msdn.microsoft.com/ru-ru/magazine/dn802602.aspx
====================================================================================================
Оператор проверки на null
----------------------------------------------------------------------------------------------------
null-propagation (распространение null)
---------------------------------------
ClassSome?.PropertySome?.Value;
ClassSome?.PropertySome?[index].Value;
T? item = collection?[index];
эквивалент
T? item = (collection != null) ? collection[index] : null;
----------------------------------------------------------------------------------------------------
Проверка на null до вызова делегата
-----------------------------------
OnTemperatureChanged?.Invoke(this, value)
----------------------------------------------------------------------------------------------------
coalesce operator (комбинация с оператором слияния)
Оператор ?? - оператором объединения со значением NULL.
---------------------------------------------------
Вместо проверки на null в linesOfCode до вызова Length вы можете написать алгоритм подсчета элементов так:
List<string> linesOfCode = ParseSourceCodeFile("Program.cs");
return linesOfCode?.Count ?? 0;
Он возвращает левый операнд, если этот операнд не имеет значение NULL; в противном случае возвращается правый операнд.
List<string> linesOfCode = null;
int i = linesOfCode?.Count ?? 0;
Console.WriteLine(@"Length = " + Convert.ToString(i));
----------------------------------------------------------------------------------------------------
В этом случае любой пустой набор (без элементов) и null-набор нормализуются так, чтобы вернуть одинаковый счетчик. Если вкратце, то оператор проверки на null будет:
- возвращать null, если операнд — null;
- сокращать дополнительные вызовы в цепочке вызовов, если операнд — null;
- возвращать тип, допускающий null-значение (System.Nullable<T>), если целевой член возвращает значимый тип;
- поддерживать вызов делегата безопасным в многопоточной среде способом;
- доступен и как оператор члена (?.), и как оператор индекса (?[…]).
----------------------------------------------------------------------------------------------------
Expression-bodied functions (функции сжатые до выражений)
---------------------------------------------------------
public int TimesTwo (int x) => x * 2;
public string SomeProperty => "Property value";
----------------------------------------------------------------------------------------------------
Auto-property initializers (инициализаторы свойств)
---------------------------------------------------
public DateTime TimeStamp { get; set; } = DateTime.UtcNow;
public string User { get; set; } = System.Security.Principal.WindowsPrincipal.Current.Identity.Name;
public string Process { get; set; } = System.Diagnostics.Process.GetCurrentProcess().ProcessName;
----------------------------------------------------------------------------------------------------
Index Initializers (инициализаторы индексов)
--------------------------------------------
var some = new Dictionary<int, string>() { [3] = "three", [10] = "ten"};
----------------------------------------------------------------------------------------------------
String interpolation (интерполяция строк)
-----------------------------------------
var s = $"It is {DateTime.Now.DayOfWeek} today.";
----------------------------------------------------------------------------------------------------
Exception filters (фильтры исключений)
--------------------------------------
try {
    new WebClient().DownloadString("http://asef");
} catch (WebException ex) when (ex.Status == WebExceptionStatus.Timeout) {
    ...
}
----------------------------------------------------------------------------------------------------
using static позволяет импортировать статические членые
------------
using static System.Console;
WriteLine("Hello, World");
----------------------------------------------------------------------------------------------------
nameof возвращает имя переменной, типа
------
int capacity = 123;
string s = nameof(capacity);
----------------------------------------------------------------------------------------------------
